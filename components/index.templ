package components

import (
	"go-htmx/api"
)

templ Index(parks []api.Park, placeName string, state string) {
	@Page("Pick A Park!", PageIndex(parks, placeName, state))
}

templ PageIndex(parks []api.Park, placeName string, state string) {
	<div class="flex flex-col items-center mx-auto text-center pt-4 mb-4">
		<h1 id="main-title" class="dark:text-amber-100 text-4xl md:text-5xl font-black text-stone-700">Pick A Park</h1>
		<div class="geocoder rounded mt-6 bg-stone-100">
			<div id="geocoder"></div>
		</div>
	</div>

	<div id="parks-container" class="text-center">
		@Parks(parks, placeName, state)
	</div>

	<script>
	(function() {
        const CACHE_EXPIRATION_HOURS = 1; // set cache expiration time to 1 hour

        function getCache() {
            const cache = localStorage.getItem('locationCache');
            if (cache) {
                const parsedCache = JSON.parse(cache);
                const cacheTime = new Date(parsedCache.timestamp);
                const currentTime = new Date();
                // check if the cache has expired
                if ((currentTime - cacheTime) / (1000 * 60 * 60) < CACHE_EXPIRATION_HOURS) {
                    return parsedCache;
                } else {
                    localStorage.removeItem('locationCache');
                }
            }
            return null;
        }

        function setCache(placeName, state) {
            const cache = {
                placeName: placeName,
                state: state,
                timestamp: new Date().toISOString()
            };
            localStorage.setItem('locationCache', JSON.stringify(cache));
        }

        // check if Geolocation is supported
        if (!navigator.geolocation) {
            console.log("Geolocation is not supported by this browser.");
            return;
        } else if (window.location.pathname != '/') {
            return;
        }

        const cachedLocation = getCache();
        if (cachedLocation) {
            // use cached location data
            const url = '/place/' + encodeURIComponent(cachedLocation.placeName) + '/' + encodeURIComponent(cachedLocation.state);
            htmx.ajax('GET', url, {
                source: '#parks-container',
                target: '#parks-container',
            });
        } else {
            // get current position
            navigator.geolocation.getCurrentPosition(function(position) {
                let latitude = position.coords.latitude;
                let longitude = position.coords.longitude;
                fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=place&countries=us&access_token=pk.eyJ1IjoiYm9nenoiLCJhIjoiY2x2MDU0NjBoMWwzYjJqbWpnazlpaGkzbiJ9.DbPQ3cgc-RxyA5vlEW0mdQ`)
                    .then(response => response.json())
                    .then(data => {
                        let placeNameParts = data.features[0].place_name.split(',');
                        let placeName = placeNameParts[0];
                        let state = placeNameParts[1].trim();
                        let url = '/place/' + encodeURIComponent(placeName) + '/' + encodeURIComponent(state);
                        // store place name and state in cache
                        setCache(placeName, state);
                        htmx.ajax('GET', url, {
                            values: {longitude: longitude, latitude: latitude},
                            source: '#parks-container',
                            target: '#parks-container',
                        });
                    });
            });
        }
    })();

	(function() {
		// Function to load CSS dynamically
		function loadCSS(href) {
			const link = document.createElement('link');
			link.rel = 'stylesheet';
			link.href = href;
			document.head.appendChild(link);
		}

		// Function to load JavaScript dynamically with error handling
		function loadJS(src, callback) {
			const script = document.createElement('script');
			script.src = src;
			script.onload = callback;
			script.onerror = function() {
				console.error('Script load failed:', src);
			};
			document.head.appendChild(script);
		}

		function initMapboxGeocoder() {
			mapboxgl.accessToken = "pk.eyJ1IjoiYm9nenoiLCJhIjoiY2x2MDU0NjBoMWwzYjJqbWpnazlpaGkzbiJ9.DbPQ3cgc-RxyA5vlEW0mdQ";
			const geocoderElement = document.getElementById('geocoder');
			geocoderElement.innerHTML = ''; // Clear previous instances
			const geocoder = new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				mapboxgl: mapboxgl,
				types: 'place',
				countries: 'us',
				language: 'en-US',
				placeholder: 'Where are you?',
			});

			geocoderElement.appendChild(geocoder.onAdd());
			geocoder.on('result', function(e) {
				const coords = e.result.geometry.coordinates;
				const placeNameParts = e.result.place_name.split(',');
				const placeName = placeNameParts[0];
				const state = placeNameParts[1].trim();
				const url = `/place/${encodeURIComponent(placeName)}/${encodeURIComponent(state)}`;

				htmx.ajax('GET', url, {
					values: { longitude: coords[0], latitude: coords[1] },
					source: '#parks-container',
					target: '#parks-container',
				});
			});
		}

		function initMapbox() {
			if (typeof MapboxGeocoder === 'undefined') {
				loadCSS('/mapbox-gl-geocoder.css');
				loadJS('/mapbox-gl-geocoder.min.js', initMapboxGeocoder);
			} else {
				initMapboxGeocoder();
			}
		}

		if (typeof mapboxgl === 'undefined') {
			loadCSS('/mapbox-gl.css');
			loadJS('/mapbox-gl.js', initMapbox);
		} else {
			initMapbox();
		}
	})();

	// update the currentCount in load more button
	document.addEventListener('htmx:configRequest', function(event) {
	   // ADD CHECK ON HX-PRELOAD HEADER-- MODIFY HTMX-PRELOAD.JS
		let currentCount = document.querySelectorAll('#parks .park-card').length;
		let url = event.detail.path
		// if the hx-get url is load-more-parks, add currentCount to the url
		if (url && url.includes('load-more-parks')) {
    		if (typeof currentCount !== 'undefined' && window.location.pathname.startsWith('/place/')) {
    			if (currentCount >= 32 || currentCount == 0) {
    				// hide the button
              		if (!event.detail.headers['HX-Preload']) {
                        document.getElementById('load-more-parks').style.display = 'none';
                    }
    			}
    		}
			event.detail.parameters.currentCount = currentCount;
		}
	});
	</script>
}
