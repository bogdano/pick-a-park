package components

import (
    "go-htmx/api"
	"fmt"
	"strings"
	"time"
)

templ Park(park api.Park, placeName string, alerts []api.Alert) {
	@Page(park.FullName, ParkInfo(park, placeName, alerts))
}

func trimParkName(fullName string) string {
    suffixes := []string{" National Park & Preserve", " National Park"}
    for _, suffix := range suffixes {
        if strings.HasSuffix(fullName, suffix) {
            return strings.TrimSuffix(fullName, suffix)
        }
    }
    return fullName
}

func lastUpdated(u string) string {
	// get time since last update in minutes or hours
	updated_time, err := time.Parse(time.RFC3339, u)
	if err != nil {
		return "unknown"
	}
	updated := time.Since(updated_time)
	if updated.Minutes() < 60 {
		return fmt.Sprintf("%d min", int(updated.Minutes()))
	}
	return fmt.Sprintf("%d hr", int(updated.Hours()))
}

script redirect(parkCode string) {
	redirect(parkCode)
}

templ ParkInfo(park api.Park, placeName string, alerts []api.Alert) {
	<div class="flex flex-col items-center justify-center pt-4 mb-4 gap-4">
		<div class="flex flex-col md:flex-row flex-wrap gap-3 mx-3 justify-center">
			<div class="flex flex-row justify-center gap-3 md:hidden">
				<button onclick="history.back()" class="my-auto backBtn">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:fill-white dark:hover:bg-lime-900 fill-lime-700 shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100">
						<title>Back</title>
						<g id="SVGRepo_bgCarrier" stroke-width="0"/>
						<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
						<g id="SVGRepo_iconCarrier"> <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" /> </g>
					</svg>
				</button>
				<button onclick="share();" class="my-auto ">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:text-white dark:hover:bg-lime-800 dark:bg-lime-950 dark:hover:bg-lime-900 text-lime-700 fill-none shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100" stroke="currentColor">
						<title>Share</title>
						<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9 12C9 13.3807 7.88071 14.5 6.5 14.5C5.11929 14.5 4 13.3807 4 12C4 10.6193 5.11929 9.5 6.5 9.5C7.88071 9.5 9 10.6193 9 12Z" stroke-width="1.5"></path> <path d="M14 6.5L9 10" stroke-width="1.5" stroke-linecap="round"></path> <path d="M14 17.5L9 14" stroke-width="1.5" stroke-linecap="round"></path> <path d="M19 18.5C19 19.8807 17.8807 21 16.5 21C15.1193 21 14 19.8807 14 18.5C14 17.1193 15.1193 16 16.5 16C17.8807 16 19 17.1193 19 18.5Z" stroke-width="1.5"></path> <path d="M19 5.5C19 6.88071 17.8807 8 16.5 8C15.1193 8 14 6.88071 14 5.5C14 4.11929 15.1193 3 16.5 3C17.8807 3 19 4.11929 19 5.5Z" stroke-width="1.5"></path> </g>
					</svg>
				</button>
			</div>
			<button onclick="history.back()" class="my-auto hidden md:block backBtn mobile">
				<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:fill-white dark:hover:bg-lime-900  fill-lime-700 shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100">
					<title>Back</title>
					<g id="SVGRepo_bgCarrier" stroke-width="0"/>
					<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
					<g id="SVGRepo_iconCarrier"> <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" /> </g>
				</svg>
			</button>
			<div class="flex flex-row justify-center flex-wrap md:gap-3 gap-1">
				<h1 id="main-title" class="dark:text-amber-100 text-4xl md:text-5xl text-center my-auto text-stone-700 font-black">{park.FullName}</h1>
				<span class="text-xl text-center self-end mb-0.5 text-stone-500 font-bold">{park.States}</span>
			</div>
			<button onclick="share();" class="my-auto hidden md:block">
				<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:hover:bg-lime-900 dark:text-white text-lime-700 fill-none shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100" stroke="currentColor">
					<title>Share</title>
					<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9 12C9 13.3807 7.88071 14.5 6.5 14.5C5.11929 14.5 4 13.3807 4 12C4 10.6193 5.11929 9.5 6.5 9.5C7.88071 9.5 9 10.6193 9 12Z" stroke-width="1.5"></path> <path d="M14 6.5L9 10" stroke-width="1.5" stroke-linecap="round"></path> <path d="M14 17.5L9 14" stroke-width="1.5" stroke-linecap="round"></path> <path d="M19 18.5C19 19.8807 17.8807 21 16.5 21C15.1193 21 14 19.8807 14 18.5C14 17.1193 15.1193 16 16.5 16C17.8807 16 19 17.1193 19 18.5Z" stroke-width="1.5"></path> <path d="M19 5.5C19 6.88071 17.8807 8 16.5 8C15.1193 8 14 6.88071 14 5.5C14 4.11929 15.1193 3 16.5 3C17.8807 3 19 4.11929 19 5.5Z" stroke-width="1.5"></path> </g>
				</svg>
			</button>
		</div>
	</div>

	<div class="dark:text-amber-50 sedan-sc-regular text-center text-stone-700 text-xl max-w-5xl mx-4 md:mx-auto mb-8 break-words">
		{park.Description}
	</div>

	<div class="blaze-slider mb-8">
		<div class="blaze-container max-w-3xl mx-auto">
			<div class="blaze-track-container md:rounded-2xl bg-stone-200 dark:bg-stone-500 max-w-fit">
				<div class="blaze-track">
					for i, image := range park.Images {
						<img src={ string(templ.SafeURL(fmt.Sprintf("/api/files/eop7kcada8abcp4/%s/%s", park.ParkRecordId, image)))}
							alt="Park photo"
							class="park-photo w-auto object-cover block h-96"
							if i > 0 {
								loading="lazy"
							}
							/>
					}
				</div>
			</div>
			<!-- navigation buttons -->
			if len(park.Images) > 1 {
				<div class="flex justify-center items-center mt-4 gap-1">
					<button class="blaze-prev" aria-label="Go to previous slide">
						<svg class="dark:text-lime-400 text-lime-800 w-7 h-7" stroke="currentColor" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M15 7L10 12L15 17" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
					</button>
					<span id="indexEl" class="dark:text-lime-400 text-lg text-lime-800">1</span><span class="dark:text-amber-50 text-lg">/ { fmt.Sprintf("%v", len(park.Images)) }</span>
					<button class="blaze-next" aria-label="Go to next slide">
						<svg class="dark:text-lime-400 text-lime-800 w-7 h-7" stroke="currentColor" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M10 7L15 12L10 17" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
					</button>
				</div>
			}
		</div>
	</div>

	<p class="dark:text-amber-100 max-w-3xl mx-5 md:mx-auto mb-2 text-xl text-center text-stone-700 font-bold">WEATHER INFO</p>
	<p class="dark:text-amber-50 text-center text-stone-700 text-lg max-w-4xl mx-4 md:mx-auto mb-8 break-words">
		{park.WeatherInfo}
	</p>

	<!-- weather data: Date, TemperatureDayF, TemperatureNightF, WeatherIcon -->
	<span class="dark:text-amber-100 text-stone-700 font-bold text-sm w-full block text-center mb-3">Weather @ { trimParkName(park.FullName) }</span>
	<div class="w-full overflow-x-auto hide-scrollbar lg:px-0 mb-3">
		<div id="weather-data" class="flex flex-row gap-2 md:justify-center items-center pb-2 md:pl-0">
			for _, date := range park.Weather {
				<div class="flex flex-col items-center min-w-16">
					<span class="dark:text-amber-50 text-sm text-stone-700">{date.Date}</span>
					<img src={ date.WeatherIcon } alt="Weather icon" class="w-16 h-16" loading="lazy" />
					<div class="flex flex-col items-center gap-1">
						<span class="temperature dark:text-amber-50 text-xs text-stone-700 font-bold"
							  temp-C={ date.TemperatureDayC + "째C" }
							  temp-F={ date.TemperatureDayF + "째F" }></span>
						<span class="temperature dark:text-amber-50 text-xs text-stone-700 font-bold"
							  temp-C={ date.TemperatureNightC + "째C" }
							  temp-F={ date.TemperatureNightF + "째F" }></span>
					</div>
				</div>
			}
		</div>
	</div>
	<span class="text-stone-500 text-xs text-center w-full block font-bold mb-8">last updated: { lastUpdated(park.Weather[0].LastUpdated) }</span>

	<p class="dark:text-amber-100 max-w-3xl mx-5 md:mx-auto text-xl text-center text-stone-700 font-bold">DIRECTIONS INFO</p>
	if placeName != "" {
		<div id="directions" class="group bg-lime-700 text-white font-mono max-w-3xl mx-auto mt-4 md:rounded-2xl px-8 py-6 relative overflow-hidden">
			<div class="flex flex-col md:flex-row justify-between w-full items-center">
				<div class="text-center md:text-lg">
					<span>{ strings.Split(placeName, ",")[0] + ", " + strings.Split(placeName, ",")[1] }</span>
				</div>
				<a href={ templ.SafeURL(fmt.Sprintf("https://www.google.com/maps/search/?api=1&query=%s,%s", park.Latitude, park.Longitude)) } target="blank" class="do-not-prerender absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-50 md:rounded-2xl transition-opacity cursor-pointer flex justify-center items-center">
					<img src="/gmaps.svg" alt="Navigate to Park" class="opacity-0 group-hover:opacity-100 w-20 h-20" />
				</a>
				<div class="block flex-grow flex flex-col items-center mx-2 text-center">
					<span class="distance md:text-lg text-xs text-nowrap font-bold mb-2"
						distance-mi={ park.DrivingDistanceMi }
						distance-km={ park.DrivingDistanceKm }>
					</span>
					<div class="w-full flex items-center justify-center">
						<div class="flex-grow border-t-2 border-white border-dashed hidden md:flex"></div>
						<svg viewBox="0 0 24 24" class="w-6 h-6 fill-current ml-2 hidden md:block" xmlns="http://www.w3.org/2000/svg">
							<path d="M5.536 21.886a1.004 1.004 0 0 0 1.033-.064l13-9a1 1 0 0 0 0-1.644l-13-9A.998.998 0 0 0 5 3v18a1 1 0 0 0 .536.886zM7 4.909 17.243 12 7 19.091V4.909z"></path>
						</svg>
						<svg class="w-6 h-6 fill-current md:hidden" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
							<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M21.886 5.536A1.002 1.002 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13a.998.998 0 0 0 1.644 0l9-13a.998.998 0 0 0 .064-1.033zM12 17.243 4.908 7h14.184L12 17.243z"></path></g>
						</svg>
					</div>
					<span class="md:text-lg text-xs text-nowrap font-bold mt-2">
						if park.DriveTime != "" {
							{ park.DriveTime + " hr" }
						} else {
							unreachable
						}
					</span>
				</div>
				<div class="text-center md:text-lg">
					<span>{ trimParkName(park.FullName) }</span>
				</div>
			</div>
			<a  href={ templ.SafeURL(fmt.Sprintf("/park/%s", park.ParkCode)) }
			    hx-swap="show:none"
				preload
			    aria-label="Hide start location"
				class="opacity-0 group-hover:opacity-100 absolute right-2 top-2 p-1 rounded-full bg-red-700 hover:bg-red-900">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-4 h-4 fill-current stroke-current">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
				</svg>
			</a>
		</div>
	}
	<div class="dark:text-amber-50 text-center text-stone-700 text-lg max-w-4xl mx-4 md:mx-auto mt-4 mb-8 break-words">
		{park.DirectionsInfo}
	</div>
	if park.Campgrounds > 0 {
		<a 	href={ templ.SafeURL(fmt.Sprintf("/campgrounds/%s", park.ParkCode)) }
			preload="mouseover"
			class="flex flex-row w-72 mx-auto shadow-md mb-12 p-4 text-lg justify-center align-middle font-bold text-white bg-lime-700 rounded-2xl hover:bg-lime-800 cursor-pointer">
			<svg class="w-6 h-6 mr-2 fill-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 297.136 297.136" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 297.136 297.136">
                <g>
                    <path d="m232.515,264.944l-28.297-8.784 28.131-8.732c8.664-2.823 13.4-12.137 10.578-20.8-2.824-8.665-12.137-13.4-20.801-10.577l-73.559,22.834-73.558-22.835c-8.664-2.823-17.977,1.912-20.801,10.577-2.822,8.663 1.914,17.977 10.578,20.8l28.131,8.732-28.297,8.784c-8.664,2.822-13.4,12.136-10.576,20.799 2.822,8.664 12.135,13.4 20.799,10.577l73.725-22.886 73.725,22.886c8.664,2.823 17.977-1.913 20.799-10.577 2.824-8.663-1.913-17.976-10.577-20.798z"/>
                    <path d="m121.648,209.237c0-40.52 27.011-79.78 27.011-79.78s27.017,39.26 27.017,79.78c79.605,0 75.389-79.648 56.217-120.303-4.033-8.553-15.586-10.06-21.662-2.817-15.578,18.572-34.005,29.066-34.005,29.066s14.598-42.873-14.38-86.78c-8.439-12.789-21.273-21.456-32.278-26.998-8.696-4.379-18.991,2.018-18.813,11.754 0.755,41.521-29.282,66.196-43.839,88.024-27.014,40.521-13.509,108.054 54.732,108.054z"/>
                </g>
            </svg>
			<span>View Campgrounds</span>
		</a>
	}

	if len(alerts) > 0 {
		<div class="flex flex-col items-center gap-4 mb-8">
			<span class="text-white bg-red-900 px-4 py-1 font-bold text-2xl rounded">Alerts</span>
			<div class="max-w-3xl mx-auto">
				for _, alert := range alerts {
					<div class={"p-4 md:rounded-2xl mb-2 md:mb-4 relative group",
								templ.KV("dark:bg-red-700 dark:bg-opacity-60 dark:text-red-100 bg-red-100 text-red-800", alert.Category == "Danger" || alert.Category == "Park Closure"),
								templ.KV("dark:bg-amber-700 dark:bg-opacity-80 dark:text-amber-100 bg-amber-100 text-amber-800", alert.Category == "Caution"),
								templ.KV("dark:bg-green-900 dark:text-green-100 bg-green-100 text-green-800", alert.Category == "Information"),
								templ.KV("dark:bg-fuchsia-900 dark:text-fuchsia-100 bg-fuchsia-100 text-fuchsia-800", alert.Category != "Information" && alert.Category != "Caution" && alert.Category != "Danger" && alert.Category != "Park Closure")}>
						<p class="text-lg">{strings.ToUpper(alert.Category)}</p>
						<p class="font-bold text-base">{alert.Title}</p>
						<p class="text-sm mb-4 break-words">{alert.Description}</p>
						if alert.Url != "" {
							<a href={ templ.SafeURL(fmt.Sprintf(alert.Url)) } class="font-bold text-sm absolute right-4 bottom-4 group-hover:underline">more</a>
						}
					</div>
				}
			</div>
		</div>
	}
	<a  href={ templ.SafeURL(fmt.Sprintf("https://www.nps.gov/%s/planyourvisit/", park.ParkCode))} target="_blank"
        class="do-not-prerender flex flex-row items-center justify-center w-72 mx-auto mb-12 py-2 px-4 text-lg text-center font-bold text-white bg-lime-700 rounded-2xl hover:bg-lime-800 cursor-pointer">
        <span class="mr-1">More Info</span>
		<svg class="h-5 w-5 text-white" stroke="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
			<g id="Interface / External_Link">
			<path id="Vector" d="M10.0002 5H8.2002C7.08009 5 6.51962 5 6.0918 5.21799C5.71547 5.40973 5.40973 5.71547 5.21799 6.0918C5 6.51962 5 7.08009 5 8.2002V15.8002C5 16.9203 5 17.4801 5.21799 17.9079C5.40973 18.2842 5.71547 18.5905 6.0918 18.7822C6.5192 19 7.07899 19 8.19691 19H15.8031C16.921 19 17.48 19 17.9074 18.7822C18.2837 18.5905 18.5905 18.2839 18.7822 17.9076C19 17.4802 19 16.921 19 15.8031V14M20 9V4M20 4H15M20 4L13 11" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</g>
		</svg>
    </a>
	<script>
	(function() {
		function loadScript(src, callback) {
			const script = document.createElement('script');
			script.src = src;
			script.onload = callback;
			script.onerror = function() {
				console.error('Failed to load script:', src);
			};
			document.head.appendChild(script);
		}

		function initSlider() {
			const el = document.querySelector('.blaze-slider');
			if (!el) {
				console.error('BlazeSlider element not found');
				return;
			}
			const config = {
				all: {
					loop: true,
					slideGap: '5px',
				},
			};
			const slider = new BlazeSlider(el, config);
			const indexEl = document.getElementById('indexEl');
			if (indexEl) {
				slider.onSlide((pageIndex, firstVisibleSlideIndex, lastVisibleSlideIndex) => {
					indexEl.textContent = pageIndex + 1;
				});
			}
			document.addEventListener('keydown', function(event) {
				if (event.key === 'ArrowLeft') {
					slider.prev()
				} else if (event.key === 'ArrowRight') {
					slider.next()
				}
			});
		}
		if (typeof BlazeSlider === 'undefined') {
			loadScript('/blaze-slider.min.js', initSlider);
		} else {
			initSlider();
		}
	})();
	</script>
}
