package components

import (
    "go-htmx/api"
    "fmt"
    "strings"
	"encoding/json"
)

templ Campgrounds(park api.Park, campgrounds []api.Campground) {
	@Page(park.FullName + " | Campsites", CampgroundsInfo(park, campgrounds))
}

// get JSON for mapbox from campgrounds
func campToJSON(campgrounds []api.Campground) string {
    features := []string{}
    for _, campground := range campgrounds {
        // map that corresponds to JSON structure
        feature := map[string]interface{}{
            "type": "Feature",
            "geometry": map[string]interface{}{
                "type": "Point",
                "coordinates": []string{campground.Longitude, campground.Latitude},
            },
            "properties": map[string]interface{}{
                "title": campground.Name,
				"url": fmt.Sprintf("/campground/%s", campground.Id),
				"firstcomefirstserve": campground.FirstComeFirstServe != "0",
            },
        }
        featureJSON, _ := json.Marshal(feature)
        features = append(features, string(featureJSON))
    }
    return "[" + strings.Join(features, ",") + "]"
}

templ CampgroundsInfo(park api.Park, campgrounds []api.Campground) {
	<div class="flex flex-col items-center justify-center pt-4 mb-4 gap-4">
		<div class="flex flex-col md:flex-row flex-wrap gap-3 mx-3 justify-center">
			<div class="flex flex-row justify-center gap-3 md:hidden">
				<button onclick="history.back()" class="my-auto backBtn">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:fill-white dark:hover:bg-lime-900 fill-lime-700 shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100">
						<title>Back</title>
						<g id="SVGRepo_bgCarrier" stroke-width="0"/>
						<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
						<g id="SVGRepo_iconCarrier"> <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" /> </g>
					</svg>
				</button>
				<button onclick="share();" class="my-auto ">
					<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:text-white dark:hover:bg-lime-800 dark:bg-lime-950 dark:hover:bg-lime-900 text-lime-700 fill-none shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100" stroke="currentColor">
						<title>Share</title>
						<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9 12C9 13.3807 7.88071 14.5 6.5 14.5C5.11929 14.5 4 13.3807 4 12C4 10.6193 5.11929 9.5 6.5 9.5C7.88071 9.5 9 10.6193 9 12Z" stroke-width="1.5"></path> <path d="M14 6.5L9 10" stroke-width="1.5" stroke-linecap="round"></path> <path d="M14 17.5L9 14" stroke-width="1.5" stroke-linecap="round"></path> <path d="M19 18.5C19 19.8807 17.8807 21 16.5 21C15.1193 21 14 19.8807 14 18.5C14 17.1193 15.1193 16 16.5 16C17.8807 16 19 17.1193 19 18.5Z" stroke-width="1.5"></path> <path d="M19 5.5C19 6.88071 17.8807 8 16.5 8C15.1193 8 14 6.88071 14 5.5C14 4.11929 15.1193 3 16.5 3C17.8807 3 19 4.11929 19 5.5Z" stroke-width="1.5"></path> </g>
					</svg>
				</button>
			</div>
			<button onclick="history.back()" class="my-auto hidden md:block backBtn mobile">
				<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:fill-white dark:hover:bg-lime-900 fill-lime-700 shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100">
					<title>Back</title>
					<g id="SVGRepo_bgCarrier" stroke-width="0"/>
					<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
					<g id="SVGRepo_iconCarrier"> <path d="M4 10L3.29289 10.7071L2.58579 10L3.29289 9.29289L4 10ZM21 18C21 18.5523 20.5523 19 20 19C19.4477 19 19 18.5523 19 18L21 18ZM8.29289 15.7071L3.29289 10.7071L4.70711 9.29289L9.70711 14.2929L8.29289 15.7071ZM3.29289 9.29289L8.29289 4.29289L9.70711 5.70711L4.70711 10.7071L3.29289 9.29289ZM4 9L14 9L14 11L4 11L4 9ZM21 16L21 18L19 18L19 16L21 16ZM14 9C17.866 9 21 12.134 21 16L19 16C19 13.2386 16.7614 11 14 11L14 9Z" /> </g>
				</svg>
			</button>
			<div class="flex flex-row justify-center flex-wrap gap-3">
				<h1 id="main-title" class="dark:text-amber-100 text-4xl md:text-5xl text-center my-auto text-stone-700 font-black">{ trimParkName(park.FullName) + " Campsites"}</h1>
				<span class="text-xl text-center self-end mb-0.5 text-stone-500 font-bold">{park.States}</span>
			</div>
			<button onclick="share();" class="my-auto hidden md:block">
				<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="dark:bg-lime-950 dark:hover:bg-lime-900 dark:text-white text-lime-700 fill-none shadow-md h-12 w-12 border border-lime-700 rounded-xl align-middle p-1 hover:bg-lime-100" stroke="currentColor">
					<title>Share</title>
					<g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9 12C9 13.3807 7.88071 14.5 6.5 14.5C5.11929 14.5 4 13.3807 4 12C4 10.6193 5.11929 9.5 6.5 9.5C7.88071 9.5 9 10.6193 9 12Z" stroke-width="1.5"></path> <path d="M14 6.5L9 10" stroke-width="1.5" stroke-linecap="round"></path> <path d="M14 17.5L9 14" stroke-width="1.5" stroke-linecap="round"></path> <path d="M19 18.5C19 19.8807 17.8807 21 16.5 21C15.1193 21 14 19.8807 14 18.5C14 17.1193 15.1193 16 16.5 16C17.8807 16 19 17.1193 19 18.5Z" stroke-width="1.5"></path> <path d="M19 5.5C19 6.88071 17.8807 8 16.5 8C15.1193 8 14 6.88071 14 5.5C14 4.11929 15.1193 3 16.5 3C17.8807 3 19 4.11929 19 5.5Z" stroke-width="1.5"></path> </g>
				</svg>
			</button>
		</div>
	</div>

	<!-- mapbox map with all campgrounds -->
	<div class="max-w-3xl mx-5 mb-8 md:mx-auto h-96 rounded-2xl bg-stone-200" id="map" data-markers={ campToJSON(campgrounds) } data-lat={ park.Latitude } data-lon={ park.Longitude }></div>

    <div class="flex flex-col items-center gap-4 mb-12">
        <div class="max-w-3xl mx-auto">
            for _, campground := range campgrounds {
                <a href={ templ.SafeURL(fmt.Sprintf("/campground/%s", campground.Id)) } id={ fmt.Sprintf("camp-%s", campground.Id) }
                   hx-boost="false"
                   preload
                   preload-images="true"
				   class={ "dark:bg-opacity-10 dark:bg-amber-500 dark:border-amber-600 dark:hover:bg-opacity-20 hover:bg-amber-200 border border-amber-300 mx-5 flex justify-between items-center p-4 rounded-2xl mb-4 cursor-pointer group bg-amber-100", templ.KV("dark:bg-green-500 dark:border-green-500 border-green-300 hover:bg-green-200 bg-green-100", campground.FirstComeFirstServe != "0") }>
                    <div class="flex flex-col">
						<p class={ "dark:text-amber-50 text-amber-700 font-bold text-xl", templ.KV("text-green-700", campground.FirstComeFirstServe != "0") }>{ strings.ToUpper(campground.Name) }</p>
						<p class="dark:text-amber-50 mb-2">{ campground.Description }...</p>
						if campground.FirstComeFirstServe != "0" {
							<p class="dark:text-lime-500 text-lime-700 font-bold text-sm">has first-come-first-served spots</p>
						} else {
							<p class="dark:text-amber-500 text-amber-700 font-bold text-sm">reservations required</p>
						}
					</div>
					<svg class="w-12 h-12 md:h-7 md:w-7 dark:text-amber-100" stroke="currentColor" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
						<g id="SVGRepo_bgCarrier" stroke-width="0"/>
						<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"/>
						<g id="SVGRepo_iconCarrier"> <path d="M10 7L15 12L10 17" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/> </g>
					</svg>
                </a>
            }
        </div>
    </div>

    <script>
		function loadMapboxScripts(callback) {
			if (typeof mapboxgl === 'undefined') {
				const script = document.createElement('script');
				const style = document.createElement('link');
				script.src = '/mapbox-gl.js';
				style.rel = 'stylesheet';
				style.href = '/mapbox-gl.css';
				document.head.appendChild(style);
				document.head.appendChild(script);
				script.onload = callback;
				script.onerror = () => {
					console.error('Failed to load Mapbox GL JS');
				};
			} else {
				callback();
			}
		}

		function initMapboxMap() {
			mapboxgl.accessToken = "pk.eyJ1IjoiYm9nenoiLCJhIjoiY2x2MDU0NjBoMWwzYjJqbWpnazlpaGkzbiJ9.DbPQ3cgc-RxyA5vlEW0mdQ";
			const mapDiv = document.getElementById('map');
			const markers = JSON.parse(mapDiv.dataset.markers).filter(marker => marker.geometry.coordinates[0] !== '');
			const map = new mapboxgl.Map({
				container: 'map',
				cooperativeGestures: true,
				style: 'mapbox://styles/mapbox/outdoors-v12?optimize=true',
				center: [parseFloat(mapDiv.dataset.lon), parseFloat(mapDiv.dataset.lat)],
				minZoom: 7,
			});
			map.on('load', function() {
				processMarkers(markers, map);
				map.addControl(new mapboxgl.NavigationControl());
				map.addControl(new mapboxgl.FullscreenControl());
			});
		}

		function processMarkers(markers, map) {
			let coords = markers.map(marker => marker.geometry.coordinates);
			adjustMapView(coords, map);
			markers.forEach(marker => addMarker(marker, map));
		}

		function adjustMapView(coords, map) {
			if (coords.length > 1) {
				const bounds = coords.reduce((bounds, coord) => bounds.extend(coord), new mapboxgl.LngLatBounds(coords[0], coords[0]));
				map.fitBounds(bounds, { padding: 75 });
			} else if (coords.length === 1) {
				map.setCenter(coords[0]);
				map.setZoom(14);
			}
		}

		function addMarker(marker, map) {
			const color = marker.properties.firstcomefirstserve ? "#65a30d" : "#e85151";
			new mapboxgl.Marker({ color: color })
				.setPopup(new mapboxgl.Popup({ closeButton: false, focusAfterOpen: false, maxWidth: 'none' })
					.setHTML(`<a href="${marker.properties.url}" class="font-bold underline text-lime-800">${marker.properties.title}</a>`))
				.setLngLat(marker.geometry.coordinates)
				.addTo(map);
		}

		if (typeof mapboxgl === 'undefined') {
			loadMapboxScripts(initMapboxMap);
		} else {
			initMapboxMap();
		}
    </script>
}
